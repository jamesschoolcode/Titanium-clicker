<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Titanium Clicker</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>
    body {
      background: radial-gradient(circle at 50% 20%, #23244a 60%, #19182c 100%);
      font-family: 'Segoe UI', Arial, sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
    .container {
      max-width: 420px;
      margin: 60px auto;
      padding: 30px;
      border-radius: 18px;
      background: linear-gradient(135deg, #22243E 70%, #3F51B5 100%);
      color: #fafbfc;
      box-shadow: 0 8px 32px rgba(60,80,200,0.18);
    }
    h2 {
      text-align: center;
      font-weight: 700;
      letter-spacing: 1px;
      margin-bottom: 8px;
    }
    .tabbar {
      display: flex;
      justify-content: space-around;
      align-items: stretch;
      margin: 18px 0 16px 0;
      border-radius: 10px;
      overflow: hidden;
      background: #181a39;
      box-shadow: 0 2px 8px #23244a44;
    }
    .tabbtn {
      flex: 1;
      border: none;
      background: none;
      color: #FFD700;
      padding: 13px 0;
      font-size: 1.12em;
      font-weight: 700;
      cursor: pointer;
      outline: none;
      transition: background 0.15s, color 0.15s;
      border-right: 1px solid #23244a;
    }
    .tabbtn:last-child { border-right: none; }
    .tabbtn.active, .tabbtn:hover {
      background: #FFD700;
      color: #23244A;
    }
    .tabcontent {
      display: none;
      animation: fadeIn .4s;
    }
    .tabcontent.active { display: block; }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px);}
      to   { opacity: 1; transform: none;}
    }
    .stats {
      display: flex;
      justify-content: space-around;
      align-items: center;
      margin-bottom: 16px;
      font-size: 1.1em;
      font-weight: 500;
    }
    .cash {
      margin-bottom: 12px;
      font-size: 1.4em;
      font-weight: 700;
      text-align: center;
    }
    .cash span {
      color: #FFD700;
    }
    .click-btn {
      display: block;
      margin: 0 auto 28px auto;
      padding: 28px 70px;
      font-size: 1.6rem;
      font-weight: 600;
      border-radius: 64px;
      color: #fff;
      border: none;
      box-shadow: 0 4px 24px #8E2DE280;
      transition: box-shadow 0.2s, transform 0.1s, background 0.3s;
      cursor: pointer;
      background: linear-gradient(90deg, #8E2DE2 0%, #4A00E0 100%);
    }
    .click-btn:active {
      box-shadow: 0 2px 10px #4A00E0AA;
      transform: scale(0.97);
    }
    /* Skins */
    .skin-default {
      background: linear-gradient(90deg, #8E2DE2 0%, #4A00E0 100%);
      color: #fff;
    }
    .skin-gold {
      background: linear-gradient(90deg, #FFD700 0%, #FFB300 100%);
      color: #23244A;
    }
    .skin-carbon {
      background: linear-gradient(135deg, #232b2b 60%, #485563 100%);
      color: #f3f3f3;
      border: 2px solid #191919;
      text-shadow: 1px 1px 2px #0009;
    }
    .skin-red {
      background: linear-gradient(90deg, #ff5858 0%, #f857a6 100%);
      color: #fff;
    }
    .skin-green {
      background: linear-gradient(90deg, #56ab2f 0%, #a8e063 100%);
      color: #222;
    }
    .skin-cyber {
      background: linear-gradient(90deg, #00F2FE 0%, #4FACFE 100%);
      color: #222;
      text-shadow: 0 0 6px #00eaffb3;
      border: 2px solid #00eaff77;
    }
    .skin-pink {
      background: linear-gradient(90deg, #ffafcc 0%, #a2d2ff 100%);
      color: #7c2a6a;
    }
    .skin-mystic {
      background: linear-gradient(110deg, #5f2c82 0%, #49a09d 100%);
      color: #fff;
      text-shadow: 0 0 8px #0005;
    }
    .skin-preview {
      padding: 6px 22px;
      font-size: 1.1em;
      border-radius: 50px;
      border: none;
      margin: 0 0 0 8px;
      display: inline-block;
      pointer-events: none;
    }
    .skin-shop-section {
      margin: 20px 0 0 0;
      background: #1a1934;
      border-radius: 12px;
      padding: 16px 12px 8px 12px;
      box-shadow: 0 2px 8px #23244a77;
    }
    .skin-shop-list {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin: 0;
      padding: 0;
      list-style: none;
    }
    .skin-shop-row {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: #23244a;
      border-radius: 7px;
      padding: 10px 12px;
    }
    .skin-shop-row .skin-shop-label {
      display: flex;
      align-items: center;
      gap: 10px;
      font-weight: 600;
      font-size: 1.04em;
      color: #FFD700;
    }
    .skin-buy-btn, .skin-use-btn {
      padding: 7px 16px;
      border-radius: 6px;
      font-size: 1em;
      font-weight: 700;
      border: none;
      cursor: pointer;
      margin-left: 12px;
      transition: background 0.2s, color 0.2s;
    }
    .skin-buy-btn {
      background: linear-gradient(90deg, #FFD700 0%, #FFB300 100%);
      color: #23244A;
    }
    .skin-buy-btn:disabled {
      background: #444;
      color: #999;
      cursor: not-allowed;
    }
    .skin-use-btn {
      background: linear-gradient(90deg, #8E2DE2 0%, #4A00E0 100%);
      color: #fff;
    }
    .skin-use-btn:disabled {
      background: #ccc;
      color: #888;
      cursor: not-allowed;
    }
    .skin-owned-label {
      color: #FFD700;
      font-size: 0.99em;
      margin-left: 8px;
      font-weight: 700;
    }
    .autoclicker-info {
      background: #22243E;
      border-radius: 8px;
      padding: 14px 17px;
      margin-top: 24px;
      margin-bottom: 12px;
      text-align: center;
      font-size: 1.1em;
      box-shadow: 0 2px 8px #22243e44;
    }
    .upgrades {
      margin-top: 36px;
    }
    .upgrade-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .upgrade {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: #23244A;
      border-radius: 8px;
      padding: 12px 17px;
      margin-bottom: 14px;
      opacity: 1;
      transition: opacity 0.4s;
    }
    .upgrade.locked {
      opacity: 0.4;
      filter: grayscale(0.8);
      pointer-events: none;
    }
    .upgrade-info {
      flex: 1;
    }
    .upgrade-title {
      font-weight: 600;
      font-size: 1.07em;
    }
    .upgrade-details {
      font-size: 0.99em;
      opacity: 0.7;
    }
    .upgrade-btn {
      background: linear-gradient(90deg, #FFD700 0%, #FFB300 100%);
      color: #23244A;
      font-weight: 700;
      font-size: 15px;
      border: none;
      border-radius: 6px;
      padding: 8px 16px;
      cursor: pointer;
      transition: background 0.2s;
      margin-left: 22px;
    }
    .upgrade-btn:disabled {
      background: linear-gradient(90deg, #555 0%, #333 100%);
      color: #bbb;
      cursor: not-allowed;
    }
    .level-bar-container {
      background: #11142a;
      border-radius: 6px;
      height: 18px;
      margin: 0 0 16px 0;
      overflow: hidden;
      box-shadow: 0 1px 6px #0002;
    }
    .level-bar {
      background: linear-gradient(90deg,#FFD700 0%,#4A00E0 100%);
      height: 100%;
      transition: width 0.6s cubic-bezier(.45,.32,.38,.88);
    }
    .stocks-section {
      background: #23244A;
      border-radius: 10px;
      margin-top: 34px;
      margin-bottom: 10px;
      padding: 18px 12px 10px 12px;
      box-shadow: 0 2px 8px #23244a60;
    }
    .stocks-section h4 {
      margin: 0 0 8px 0;
      letter-spacing: 0.5px;
      font-weight: 700;
      font-size: 1.13em;
    }
    .stock-list { list-style: none; padding: 0; margin: 0; }
    .stock-row {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 10px;
      padding: 7px 0;
      border-bottom: 1px solid #22264a;
      font-size: 1em;
    }
    .stock-row:last-child { border-bottom: none; }
    .stock-col {
      flex: 1;
      text-align: center;
    }
    .stock-col:first-child { text-align: left; }
    .stock-col:last-child { text-align: right; }
    .stock-btn {
      padding: 5px 12px;
      border-radius: 5px;
      font-weight: 700;
      font-size: 0.98em;
      margin-left: 8px;
      border: none;
      color: #fff;
      background: linear-gradient(90deg, #8E2DE2 0%, #4A00E0 100%);
      cursor: pointer;
      transition: background 0.2s;
    }
    .stock-btn.sell {
      background: linear-gradient(90deg, #FFD700 0%, #FFB300 100%);
      color: #23244A;
    }
    .stock-btn:disabled {
      background: #333;
      color: #bbb;
      cursor: not-allowed;
    }
    .your-stock {
      font-size: 0.98em;
      color: #FFD700;
      margin-left: 12px;
    }
    .save-section {
      margin: 22px 0 0 0;
      text-align: center;
    }
    .save-btn, .load-btn, .reset-btn {
      border-radius: 8px;
      border: none;
      font-size: 1em;
      font-weight: 700;
      margin: 0 6px;
      padding: 8px 22px;
      cursor: pointer;
      transition: background 0.2s;
      color: #23244A;
    }
    .save-btn { background: linear-gradient(90deg, #FFD700 0%, #FFB300 100%);}
    .load-btn { background: linear-gradient(90deg, #8E2DE2 0%, #4A00E0 100%); color: #fff;}
    .reset-btn { background: #cf3f3f; color: #fff;}
    .music-controls {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: 10px;
      gap: 10px;
      font-size: 1em;
      opacity: 0.85;
    }
    .music-btn {
      padding: 6px 16px;
      border-radius: 6px;
      font-weight: 700;
      font-size: 1em;
      border: none;
      cursor: pointer;
      background: linear-gradient(90deg, #FFD700 0%, #FFB300 100%);
      color: #23244A;
      transition: background 0.2s;
    }
    @media (max-width: 600px) {
      .container { padding: 10px; }
      .click-btn { padding: 18px 36px; font-size: 1.2rem; }
      .stats { flex-direction: column; gap: 5px; }
      .stock-row { flex-direction: column; gap: 2px; }
      .stock-col { text-align: left; }
      .skin-shop-list { flex-direction: column; }
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Titanium Clicker</h2>
    <div class="music-controls" id="musicControls">
      <button class="music-btn" id="musicToggle">Play Music</button>
      <span id="musicStatus" style="font-size:0.92em;"></span>
    </div>
    <audio id="bgMusic" src="https://cdn.pixabay.com/audio/2023/02/10/audio_12b133e1b3.mp3" loop></audio>
    <!-- Tabs -->
    <div class="tabbar">
      <button class="tabbtn active" data-tab="gameTab" id="gameTabBtn">Game</button>
      <button class="tabbtn" data-tab="achievementsTab" id="achievementsTabBtn">Achievements</button>
      <button class="tabbtn" data-tab="skinShopTab" id="skinShopTabBtn">Button Skin Shop</button>
    </div>
    <!-- Tab: Game -->
    <div class="tabcontent active" id="gameTab">
      <div class="skins-section">
        <label for="skinSelect" style="font-weight:600; color:#FFD700;">Button Skin:</label>
        <select id="skinSelect" class="skin-select"></select>
      </div>
      <div class="stats">
        <span>Level: <span id="level">1</span></span>
        <span>Clicks: <span id="totalClicks">0</span></span>
      </div>
      <div class="level-bar-container">
        <div class="level-bar" id="levelBar" style="width:0%"></div>
      </div>
      <div class="cash">Cash: <span id="cash">$0</span></div>
      <button class="click-btn skin-default" id="clickBtn">Click Titanium (+$<span id="cpc">1</span>)</button>
      <audio id="clickSound" src="https://cdn.pixabay.com/audio/2022/07/26/audio_124bfa7b3b.mp3"></audio>
      <div class="autoclicker-info" id="autoclickerInfo" style="display:none;"></div>
      <div class="upgrades">
        <h4 style="margin-bottom:10px;letter-spacing:0.5px;">Upgrades</h4>
        <ul class="upgrade-list" id="upgradeList"></ul>
      </div>
      <div class="stocks-section">
        <h4>Fake Stocks Market</h4>
        <ul class="stock-list" id="stockList"></ul>
      </div>
      <div class="save-section">
        <button class="save-btn" id="saveBtn">Save</button>
        <button class="load-btn" id="loadBtn">Load</button>
        <button class="reset-btn" id="resetBtn">Reset</button>
        <div id="saveStatus" style="margin-top:6px;font-size:0.95em;opacity:0.8;"></div>
      </div>
    </div>
    <!-- Tab: Achievements -->
    <div class="tabcontent" id="achievementsTab">
      <div class="achievements-section">
        <h4>Achievements</h4>
        <ul class="achievements-list" id="achievementsList"></ul>
      </div>
    </div>
    <!-- Tab: Skin Shop -->
    <div class="tabcontent" id="skinShopTab">
      <div class="skin-shop-section">
        <h4 style="color:#FFD700; margin-bottom:8px;">Button Skin Shop <span style="font-size:0.9em;color:#FFD700;">(10000 cash each)</span></h4>
        <ul class="skin-shop-list" id="skinShopList"></ul>
      </div>
    </div>
  </div>
  <script>
    // Level system
    let totalClicks = 0;
    let level = 1;
    const levelThresholds = [0, 10, 30, 100, 400, 1500, 5000, 15000, 50000, 200000, 1000000];

    // Game state
    let cash = 0;
    let cpc = 1;
    let autoclickerOwned = 0;
    let autoclickerCost = 10000;
    let autoclickerCps = 1;
    let autoclickerInterval = null;

    // Skins
    const skinDefs = [
      { value: "default", name: "Default", className: "skin-default" },
      { value: "gold", name: "Gold", className: "skin-gold" },
      { value: "carbon", name: "Carbon", className: "skin-carbon" },
      { value: "red", name: "Red", className: "skin-red" },
      { value: "green", name: "Green", className: "skin-green" },
      { value: "cyber", name: "Cyber", className: "skin-cyber" },
      { value: "pink", name: "Pink", className: "skin-pink" },
      { value: "mystic", name: "Mystic", className: "skin-mystic" }
    ];
    const skinMap = {};
    skinDefs.forEach(s => { skinMap[s.value] = s.className; });
    let buttonSkin = localStorage.getItem('titaniumClickerBtnSkin') || "default";
    let ownedSkins = JSON.parse(localStorage.getItem('titaniumClickerOwnedSkins') || '["default"]');

    // Achievements
    const achievementList = [
      { id: "first_click",      emoji: "👆",  name: "First Click",        desc: "Make your first click!",                    check: () => totalClicks >= 1 },
      { id: "ten_clicks",       emoji: "✋",  name: "Click Novice",       desc: "Click 10 times",                            check: () => totalClicks >= 10 },
      { id: "hundred_clicks",   emoji: "💯",  name: "Click Master",       desc: "Click 100 times",                           check: () => totalClicks >= 100 },
      { id: "thousand_clicks",  emoji: "🔱",  name: "Click Titan",        desc: "Click 1,000 times",                         check: () => totalClicks >= 1000 },
      { id: "tenk_clicks",      emoji: "🌟",  name: "Click Legend",       desc: "Click 10,000 times",                        check: () => totalClicks >= 10000 },
      { id: "first_auto",       emoji: "🤖",  name: "Automation!",        desc: "Buy your first Auto Clicker",               check: () => autoclickerOwned >= 1 },
      { id: "upgrade5",         emoji: "⬆️",  name: "Upgrade Collector",  desc: "Own 5 upgrades (any type)",                 check: () => upgrades.reduce((a, u) => a + u.owned, 0) >= 5 },
      { id: "rich",             emoji: "💰",  name: "Wealthy",            desc: "Reach $10,000 cash",                        check: () => cash >= 10000 },
      { id: "stock_investor",   emoji: "📈",  name: "Investor",           desc: "Own any stock",                             check: () => stocks.some(s => s.owned > 0) },
      { id: "stock_tycoon",     emoji: "💹",  name: "Stock Tycoon",       desc: "Own 50 total shares in stocks",             check: () => stocks.reduce((a, s) => a + s.owned, 0) >= 50 },
      { id: "millionaire",      emoji: "🤑",  name: "Millionaire",        desc: "Reach $1,000,000 cash",                     check: () => cash >= 1000000 },
      { id: "level10",          emoji: "🏆",  name: "Level 10",           desc: "Reach Level 10",                            check: () => level >= 10 }
    ];
    let achievements = {};

    // Fake stocks system
    const initialStocks = [
      { name: "TITCO", price: 100, volatility: 0.03, owned: 0 },
      { name: "MEGACORE", price: 250, volatility: 0.05, owned: 0 },
      { name: "PIXELNET", price: 40, volatility: 0.1, owned: 0 },
      { name: "CYBRIA", price: 500, volatility: 0.015, owned: 0 },
      { name: "NEONIX", price: 200, volatility: 0.07, owned: 0 }
    ];
    let stocks = initialStocks.map(s => ({...s}));

    // Upgrades with unlock levels
    const upgrades = [
      { name: "Aura Boost", cost: 50, cpcIncrease: 1, owned: 0, unlockLevel: 1 },
      { name: "Radiant Touch", cost: 200, cpcIncrease: 5, owned: 0, unlockLevel: 1 },
      { name: "Celestial Surge", cost: 1000, cpcIncrease: 25, owned: 0, unlockLevel: 2 },
      { name: "Spirit Echo", cost: 5000, cpcIncrease: 75, owned: 0, unlockLevel: 3 },
      { name: "Energized Halo", cost: 25000, cpcIncrease: 250, owned: 0, unlockLevel: 4 },
      { name: "Infinite Pulse", cost: 125000, cpcIncrease: 1000, owned: 0, unlockLevel: 5 },
      { name: "Quantum Spark", cost: 600000, cpcIncrease: 5000, owned: 0, unlockLevel: 6 },
      { name: "Galactic Surge", cost: 3000000, cpcIncrease: 25000, owned: 0, unlockLevel: 7 },
      { name: "Reality Tear", cost: 15000000, cpcIncrease: 100000, owned: 0, unlockLevel: 8 },
      { name: "Singularity", cost: 75000000, cpcIncrease: 500000, owned: 0, unlockLevel: 9 }
    ];

    // DOM refs
    const cashEl = document.getElementById('cash');
    const cpcEl = document.getElementById('cpc');
    const clickBtn = document.getElementById('clickBtn');
    const skinSelect = document.getElementById('skinSelect');
    const skinShopList = document.getElementById('skinShopList');
    const upgradeList = document.getElementById('upgradeList');
    const autoclickerInfo = document.getElementById('autoclickerInfo');
    const levelEl = document.getElementById('level');
    const totalClicksEl = document.getElementById('totalClicks');
    const levelBar = document.getElementById('levelBar');
    const clickSound = document.getElementById('clickSound');
    const stockList = document.getElementById('stockList');
    const saveBtn = document.getElementById('saveBtn');
    const loadBtn = document.getElementById('loadBtn');
    const resetBtn = document.getElementById('resetBtn');
    const saveStatus = document.getElementById('saveStatus');
    const bgMusic = document.getElementById('bgMusic');
    const musicToggle = document.getElementById('musicToggle');
    const musicStatus = document.getElementById('musicStatus');
    const achievementsList = document.getElementById('achievementsList');
    const tabBtns = document.querySelectorAll('.tabbtn');
    const tabContents = document.querySelectorAll('.tabcontent');
    let musicPlaying = false;

    // Tab switching
    tabBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        tabBtns.forEach(b => b.classList.remove('active'));
        tabContents.forEach(tc => tc.classList.remove('active'));
        btn.classList.add('active');
        document.getElementById(btn.dataset.tab).classList.add('active');
        if (btn.dataset.tab === "skinShopTab") renderSkinShop();
      });
    });

    function updateUI() {
      cashEl.textContent = `$${cash}`;
      cpcEl.textContent = cpc;
      levelEl.textContent = level;
      totalClicksEl.textContent = totalClicks;
      renderLevelBar();
      renderUpgrades();
      renderAutoclicker();
      renderStocks();
      renderAchievements();
      updateSkin();
      renderSkinSelect();
    }

    function renderLevelBar() {
      const current = totalClicks - levelThresholds[level - 1];
      const needed = (levelThresholds[level] || (levelThresholds[level-1]+500000)) - levelThresholds[level - 1];
      const percent = Math.min(100, Math.round((current / needed) * 100));
      levelBar.style.width = percent + "%";
    }

    clickBtn.addEventListener('click', () => {
      cash += cpc;
      totalClicks += 1;
      if(clickSound) {
        clickSound.currentTime = 0;
        clickSound.play();
      }
      checkLevelUp();
      updateUI();
      checkAchievements();
      saveGame();
    });

    function checkLevelUp() {
      if (level < levelThresholds.length && totalClicks >= levelThresholds[level]) {
        level += 1;
        checkLevelUp();
      }
    }

    function renderUpgrades() {
      upgradeList.innerHTML = '';
      upgrades.forEach((upg, idx) => {
        const unlocked = level >= upg.unlockLevel;
        const li = document.createElement('li');
        li.className = 'upgrade' + (unlocked ? '' : ' locked');
        const infoDiv = document.createElement('div');
        infoDiv.className = 'upgrade-info';
        infoDiv.innerHTML = `<div class="upgrade-title">${upg.name}</div>
          <div class="upgrade-details">
            +${upg.cpcIncrease} per click | Owned: ${upg.owned}
            ${!unlocked ? `<br><span style="color:#FFD700;">Unlocks at level ${upg.unlockLevel}</span>` : ''}
          </div>`;
        const btn = document.createElement('button');
        btn.className = 'upgrade-btn';
        btn.textContent = `Buy ($${upg.cost})`;
        btn.disabled = !unlocked || cash < upg.cost;
        btn.onclick = () => { buyUpgrade(idx); };
        li.appendChild(infoDiv);
        li.appendChild(btn);
        upgradeList.appendChild(li);
      });
      // Render Auto Clicker as a special upgrade at the end (unlocked at level 3)
      const autoUnlocked = level >= 3;
      const autoLi = document.createElement('li');
      autoLi.className = 'upgrade' + (autoUnlocked ? '' : ' locked');
      const autoInfo = document.createElement('div');
      autoInfo.className = 'upgrade-info';
      autoInfo.innerHTML = `<div class="upgrade-title">Auto Clicker</div>
        <div class="upgrade-details">
          +${autoclickerCps} click/sec each | Owned: ${autoclickerOwned}
          ${!autoUnlocked ? `<br><span style="color:#FFD700;">Unlocks at level 3</span>` : ''}
        </div>`;
      const autoBtn = document.createElement('button');
      autoBtn.className = 'upgrade-btn';
      autoBtn.textContent = `Buy ($${autoclickerCost})`;
      autoBtn.disabled = !autoUnlocked || cash < autoclickerCost;
      autoBtn.onclick = buyAutoClicker;
      autoLi.appendChild(autoInfo);
      autoLi.appendChild(autoBtn);
      upgradeList.appendChild(autoLi);
    }

    function buyUpgrade(idx) {
      const upg = upgrades[idx];
      if (level >= upg.unlockLevel && cash >= upg.cost) {
        cash -= upg.cost;
        cpc += upg.cpcIncrease;
        upg.owned += 1;
        upg.cost = Math.round(upg.cost * 1.4);
        updateUI();
        checkAchievements();
        saveGame();
      }
    }

    function buyAutoClicker() {
      if (level >= 3 && cash >= autoclickerCost) {
        cash -= autoclickerCost;
        autoclickerOwned += 1;
        autoclickerCost = Math.round(autoclickerCost * 1.7);
        startAutoClicker();
        updateUI();
        checkAchievements();
        saveGame();
      }
    }

    function renderAutoclicker() {
      if (autoclickerOwned > 0) {
        autoclickerInfo.style.display = '';
        autoclickerInfo.textContent =
          `Auto Clickers: ${autoclickerOwned} (+${autoclickerOwned * autoclickerCps} cash/sec)`;
      } else {
        autoclickerInfo.style.display = 'none';
      }
    }

    function startAutoClicker() {
      if (autoclickerInterval) clearInterval(autoclickerInterval);
      if (autoclickerOwned > 0) {
        autoclickerInterval = setInterval(() => {
          cash += autoclickerOwned * autoclickerCps;
          updateUI();
          checkAchievements();
          saveGame();
        }, 1000);
      }
    }

    // --- Achievements logic ---
    function checkAchievements() {
      let unlockedNew = false;
      achievementList.forEach(ach => {
        if (!achievements[ach.id] && ach.check()) {
          achievements[ach.id] = true;
          unlockedNew = true;
          showAchievementToast(ach);
        }
      });
      if (unlockedNew) saveGame(false);
      renderAchievements();
    }
    function renderAchievements() {
      achievementsList.innerHTML = '';
      achievementList.forEach(ach => {
        const unlocked = achievements[ach.id];
        const li = document.createElement('li');
        li.className = 'achievement' + (unlocked ? ' unlocked' : '');
        li.innerHTML = `<span class="emoji">${ach.emoji}</span> <b>${ach.name}</b> <span style="font-size:0.93em;opacity:0.8;">${ach.desc}</span>`;
        achievementsList.appendChild(li);
      });
    }
    function showAchievementToast(ach) {
      const toast = document.createElement('div');
      toast.textContent = `🏅 Achievement Unlocked: ${ach.name}`;
      toast.style.position = 'fixed';
      toast.style.left = '50%';
      toast.style.top = '32px';
      toast.style.transform = 'translateX(-50%)';
      toast.style.background = '#FFD700';
      toast.style.color = '#23244A';
      toast.style.fontWeight = '700';
      toast.style.fontSize = '1.13em';
      toast.style.padding = '10px 30px';
      toast.style.borderRadius = '10px';
      toast.style.zIndex = 9999;
      toast.style.boxShadow = '0 4px 22px #FFD70088';
      toast.style.opacity = '0.98';
      document.body.appendChild(toast);
      setTimeout(() => {
        toast.style.transition = 'opacity 1s';
        toast.style.opacity = '0';
        setTimeout(() => document.body.removeChild(toast), 1000);
      }, 2000);
    }

    // --- Fake stocks system ---
    function renderStocks() {
      stockList.innerHTML = '';
      stocks.forEach((stock, idx) => {
        const li = document.createElement('li');
        li.className = 'stock-row';
        const nameCol = document.createElement('div');
        nameCol.className = 'stock-col';
        nameCol.innerHTML = `<b>${stock.name}</b> <span class="your-stock">${stock.owned > 0 ? 'Your shares: ' + stock.owned : ''}</span>`;
        const priceCol = document.createElement('div');
        priceCol.className = 'stock-col';
        priceCol.innerHTML = `$${stock.price}`;
        const actionCol = document.createElement('div');
        actionCol.className = 'stock-col';
        const buyBtn = document.createElement('button');
        buyBtn.className = 'stock-btn';
        buyBtn.textContent = "Buy";
        buyBtn.disabled = cash < stock.price;
        buyBtn.onclick = () => { buyStock(idx); };
        actionCol.appendChild(buyBtn);
        const sellBtn = document.createElement('button');
        sellBtn.className = 'stock-btn sell';
        sellBtn.textContent = "Sell";
        sellBtn.disabled = stock.owned < 1;
        sellBtn.onclick = () => { sellStock(idx); };
        actionCol.appendChild(sellBtn);
        li.appendChild(nameCol);
        li.appendChild(priceCol);
        li.appendChild(actionCol);
        stockList.appendChild(li);
      });
    }

    function buyStock(idx) {
      const stock = stocks[idx];
      if (cash >= stock.price) {
        cash -= Math.round(stock.price);
        stock.owned += 1;
        updateUI();
        checkAchievements();
        saveGame();
      }
    }

    function sellStock(idx) {
      const stock = stocks[idx];
      if (stock.owned > 0) {
        cash += Math.round(stock.price);
        stock.owned -= 1;
        updateUI();
        checkAchievements();
        saveGame();
      }
    }

    function updateStockPrices() {
      stocks.forEach(stock => {
        const change = (Math.random() * 2 - 1) * stock.volatility * stock.price;
        stock.price = Math.max(1, Math.round(stock.price + change));
      });
      renderStocks();
      saveGame();
    }
    setInterval(updateStockPrices, 2000);

    // --- Skins ---
    function updateSkin() {
      clickBtn.className = "click-btn " + (skinMap[buttonSkin] || "skin-default");
      skinSelect.value = buttonSkin;
    }

    function renderSkinSelect() {
      skinSelect.innerHTML = "";
      skinDefs.forEach(skin => {
        if (ownedSkins.includes(skin.value)) {
          let opt = document.createElement("option");
          opt.value = skin.value;
          opt.textContent = skin.name;
          skinSelect.appendChild(opt);
        }
      });
      skinSelect.value = buttonSkin;
    }
    skinSelect.addEventListener("change", function() {
      buttonSkin = skinSelect.value;
      updateSkin();
      localStorage.setItem('titaniumClickerBtnSkin', buttonSkin);
      saveGame(false);
    });

    // --- Skin Shop ---
    function renderSkinShop() {
      skinShopList.innerHTML = "";
      skinDefs.forEach(skin => {
        if (skin.value === "default") return; // Default always owned
        const owned = ownedSkins.includes(skin.value);
        const li = document.createElement('li');
        li.className = 'skin-shop-row';
        const label = document.createElement('span');
        label.className = 'skin-shop-label';
        label.textContent = skin.name;
        // Add preview
        const preview = document.createElement('span');
        preview.className = 'skin-preview ' + skin.className;
        preview.textContent = "Click!";
        label.appendChild(preview);
        li.appendChild(label);

        if (!owned) {
          // Buy button
          const buyBtn = document.createElement('button');
          buyBtn.className = 'skin-buy-btn';
          buyBtn.textContent = `Buy for $10000`;
          buyBtn.disabled = cash < 10000;
          buyBtn.onclick = () => {
            if (cash >= 10000) {
              cash -= 10000;
              ownedSkins.push(skin.value);
              showSkinToast(`You bought the ${skin.name} skin!`);
              updateSkin();
              renderSkinShop();
              renderSkinSelect();
              updateUI();
              saveGame();
            }
          };
          li.appendChild(buyBtn);
        } else {
          // Use button & owned label
          const useBtn = document.createElement('button');
          useBtn.className = 'skin-use-btn';
          useBtn.textContent = buttonSkin === skin.value ? "Using" : "Use";
          useBtn.disabled = buttonSkin === skin.value;
          useBtn.onclick = () => {
            buttonSkin = skin.value;
            updateSkin();
            renderSkinShop();
            renderSkinSelect();
            saveGame();
          };
          li.appendChild(useBtn);
          const ownedLabel = document.createElement('span');
          ownedLabel.className = 'skin-owned-label';
          ownedLabel.textContent = 'Owned';
          li.appendChild(ownedLabel);
        }
        skinShopList.appendChild(li);
      });
    }

    function showSkinToast(msg) {
      const toast = document.createElement('div');
      toast.textContent = msg;
      toast.style.position = 'fixed';
      toast.style.left = '50%';
      toast.style.top = '56px';
      toast.style.transform = 'translateX(-50%)';
      toast.style.background = '#FFD700';
      toast.style.color = '#23244A';
      toast.style.fontWeight = '700';
      toast.style.fontSize = '1.13em';
      toast.style.padding = '10px 30px';
      toast.style.borderRadius = '10px';
      toast.style.zIndex = 9999;
      toast.style.boxShadow = '0 4px 22px #FFD70088';
      toast.style.opacity = '0.98';
      document.body.appendChild(toast);
      setTimeout(() => {
        toast.style.transition = 'opacity 1s';
        toast.style.opacity = '0';
        setTimeout(() => document.body.removeChild(toast), 1000);
      }, 2200);
    }

    // --- Save/Load/Reset ---
    function getSaveData() {
      return {
        cash,
        cpc,
        autoclickerOwned,
        autoclickerCost,
        totalClicks,
        level,
        upgrades: upgrades.map(u => ({...u})),
        stocks: stocks.map(s => ({...s})),
        buttonSkin,
        achievements,
        ownedSkins
      };
    }
    function saveGame(showStatus=true) {
      try {
        localStorage.setItem('titaniumClickerSave', JSON.stringify(getSaveData()));
        localStorage.setItem('titaniumClickerBtnSkin', buttonSkin);
        localStorage.setItem('titaniumClickerOwnedSkins', JSON.stringify(ownedSkins));
        if (showStatus) showSaveStatus('Game saved!');
      } catch(e) {
        showSaveStatus('Save failed!', true);
      }
    }
    function loadGame(showStatus=true) {
      try {
        const data = JSON.parse(localStorage.getItem('titaniumClickerSave'));
        if (data) {
          cash = data.cash ?? 0;
          cpc = data.cpc ?? 1;
          autoclickerOwned = data.autoclickerOwned ?? 0;
          autoclickerCost = data.autoclickerCost ?? 10000;
          totalClicks = data.totalClicks ?? 0;
          level = data.level ?? 1;
          if (data.upgrades && Array.isArray(data.upgrades)) {
            data.upgrades.forEach((u, i) => {
              if (upgrades[i]) Object.assign(upgrades[i], u);
            });
          }
          if (data.stocks && Array.isArray(data.stocks)) {
            stocks = data.stocks.map(s => ({...s}));
          }
          if (data.buttonSkin && skinMap[data.buttonSkin]) {
            buttonSkin = data.buttonSkin;
          }
          achievements = data.achievements || {};
          ownedSkins = Array.isArray(data.ownedSkins) ? data.ownedSkins.slice() : ["default"];
          // Always add default skin if missing
          if (!ownedSkins.includes("default")) ownedSkins.unshift("default");
          startAutoClicker();
          updateUI();
          if (showStatus) showSaveStatus('Game loaded!');
        } else {
          if (showStatus) showSaveStatus('No save found.', true);
        }
      } catch(e) {
        if (showStatus) showSaveStatus('Failed to load save!', true);
      }
    }
    function resetGame() {
      if (!confirm("Are you sure you want to reset your game? This cannot be undone.")) return;
      cash = 0;
      cpc = 1;
      autoclickerOwned = 0;
      autoclickerCost = 10000;
      totalClicks = 0;
      level = 1;
      upgrades.forEach((u, i) => {
        u.owned = 0;
        if (i === 0) u.cost = 50;
        if (i === 1) u.cost = 200;
        if (i === 2) u.cost = 1000;
        if (i === 3) u.cost = 5000;
        if (i === 4) u.cost = 25000;
        if (i === 5) u.cost = 125000;
        if (i === 6) u.cost = 600000;
        if (i === 7) u.cost = 3000000;
        if (i === 8) u.cost = 15000000;
        if (i === 9) u.cost = 75000000;
      });
      stocks = initialStocks.map(s => ({...s}));
      buttonSkin = "default";
      ownedSkins = ["default"];
      localStorage.setItem('titaniumClickerBtnSkin', buttonSkin);
      localStorage.setItem('titaniumClickerOwnedSkins', JSON.stringify(ownedSkins));
      achievements = {};
      if (autoclickerInterval) clearInterval(autoclickerInterval);
      updateUI();
      saveGame(false);
      showSaveStatus('Game reset!');
    }
    function showSaveStatus(msg, error=false) {
      saveStatus.textContent = msg;
      saveStatus.style.color = error ? '#cf3f3f' : '#FFD700';
      setTimeout(() => { saveStatus.textContent = ""; }, 2200);
    }
    saveBtn.addEventListener('click', () => saveGame());
    loadBtn.addEventListener('click', () => { loadGame(); checkAchievements(); });
    resetBtn.addEventListener('click', () => resetGame());

    // --- Background Music Controls ---
    function updateMusicBtn() {
      musicToggle.textContent = musicPlaying ? 'Pause Music' : 'Play Music';
      musicStatus.textContent = musicPlaying ? 'Music On 🎵' : 'Music Off';
    }
    function tryPlayMusic() {
      if (!musicPlaying) {
        bgMusic.volume = 0.4;
        bgMusic.play().then(() => {
          musicPlaying = true;
          updateMusicBtn();
        }).catch(() => {
          musicPlaying = false;
          updateMusicBtn();
        });
      }
    }
    musicToggle.addEventListener('click', function() {
      if (musicPlaying) {
        bgMusic.pause();
        musicPlaying = false;
      } else {
        bgMusic.volume = 0.4;
        bgMusic.play();
        musicPlaying = true;
      }
      updateMusicBtn();
    });
    window.addEventListener('pointerdown', function once() {
      tryPlayMusic();
      window.removeEventListener('pointerdown', once);
    });
    bgMusic.addEventListener('ended', () => { musicPlaying = false; updateMusicBtn(); });

    // Try auto-load on first open
    window.addEventListener('DOMContentLoaded', () => {
      loadGame(false);
      startAutoClicker();
      updateMusicBtn();
      updateSkin();
      checkAchievements();
      renderSkinShop();
      renderSkinSelect();
    });

    // Initial render
    updateUI();
  </script>
</body>
</html>
